[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["tools"]

[project]
name = "mcp-registry"
version = "1.0.0"
description = "NimbleTools Community MCP Server Registry management tools"
readme = "README.md"
license = "MIT"
requires-python = ">=3.13"
authors = [
    { name = "NimbleBrain Inc", email = "hello@nimblebrain.ai" },
]
keywords = ["mcp", "registry", "nimbletools", "nimblebrain", "ai-tools", "community"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
dependencies = [
    "pyyaml>=6.0",
    "jsonschema>=4.0",
    "click>=8.0",
    "rich>=13.0",
    "requests>=2.31.0",
    "httpx>=0.25.0",
    "docker>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-pyyaml",
    "types-requests",
]

[project.scripts]
mcp-registry = "tools.cli:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0", 
    "mypy>=1.5.0",
    "types-pyyaml",
    "types-requests",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]

[tool.coverage.run]
source = ["tools"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.black]
line-length = 100
target-version = ['py313']

[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
