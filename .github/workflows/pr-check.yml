name: PR Validation

# on:
#   pull_request:
#     branches: [ main ]
#     paths:
#       - 'servers/**'
#       - 'schemas/**'
#       - 'tools/**'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      servers-changed: ${{ steps.changes.outputs.servers }}
      schemas-changed: ${{ steps.changes.outputs.schemas }}
      tools-changed: ${{ steps.changes.outputs.tools }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: changes
        run: |
          # Check if any servers were added/modified
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '^servers/'; then
            echo "servers=true" >> $GITHUB_OUTPUT
          else
            echo "servers=false" >> $GITHUB_OUTPUT
          fi

          # Check if schemas changed
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '^schemas/'; then
            echo "schemas=true" >> $GITHUB_OUTPUT  
          else
            echo "schemas=false" >> $GITHUB_OUTPUT
          fi

          # Check if tools changed
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '^tools/'; then
            echo "tools=true" >> $GITHUB_OUTPUT
          else
            echo "tools=false" >> $GITHUB_OUTPUT
          fi

  validate-servers:
    needs: check-changes
    if: needs.check-changes.outputs.servers == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Get changed servers
        id: changed-servers
        run: |
          # Get list of changed server directories
          changed_dirs=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '^servers/' | cut -d'/' -f2 | sort -u)
          echo "Changed server directories: $changed_dirs"
          echo "changed_dirs<<EOF" >> $GITHUB_OUTPUT
          echo "$changed_dirs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate changed servers
        run: |
          success=true
          while IFS= read -r server_dir; do
            if [ -n "$server_dir" ]; then
              echo "üîç Validating server: $server_dir"
              if uv run python tools/validate.py "servers/$server_dir"; then
                echo "‚úÖ $server_dir passed validation"
              else
                echo "‚ùå $server_dir failed validation"
                success=false
              fi
            fi
          done <<< "${{ steps.changed-servers.outputs.changed_dirs }}"

          if [ "$success" = false ]; then
            echo "‚ùå Some servers failed validation"
            exit 1
          fi
          echo "‚úÖ All changed servers passed validation"

      - name: Test registry generation
        run: |
          echo "üîÑ Testing registry generation..."
          uv run python tools/generate.py
          echo "‚úÖ Registry generation successful"

      - name: Check for naming conflicts
        run: |
          echo "üîç Checking for server name conflicts..."
          # Extract server names from all server.yaml files
          server_names=$(find servers -name "server.yaml" -exec yq eval '.name' {} \;)

          # Check for duplicates
          duplicates=$(echo "$server_names" | sort | uniq -d)
          if [ -n "$duplicates" ]; then
            echo "‚ùå Duplicate server names found:"
            echo "$duplicates"
            exit 1
          fi
          echo "‚úÖ No naming conflicts found"

  security-check:
    needs: check-changes
    if: needs.check-changes.outputs.servers == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security scan for secrets
        run: |
          echo "üîí Scanning for hardcoded secrets..."

          # Check for potential API keys or secrets in server files
          if grep -r -i -E "(api[_-]?key|secret|password|token)" servers/ --include="*.yaml" --include="*.md"; then
            echo "‚ö†Ô∏è  Potential secrets found in server files. Please review:"
            grep -r -i -E "(api[_-]?key|secret|password|token)" servers/ --include="*.yaml" --include="*.md" -n
            echo ""
            echo "‚ÑπÔ∏è  If these are example values, ensure they are clearly marked as examples."
            echo "‚ÑπÔ∏è  Use the 'credentials' section in server.yaml for required environment variables."
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

      - name: Check Docker image references
        run: |
          echo "üê≥ Checking Docker image references..."

          # Extract image references from server.yaml files
          images=$(find servers -name "server.yaml" -exec yq eval '.deployment.image' {} \;)

          echo "Found Docker images:"
          echo "$images"

          # Check if images follow naming convention
          for image in $images; do
            if [[ ! "$image" =~ ^nimblebrain/mcp- ]]; then
              echo "‚ö†Ô∏è  Image '$image' doesn't follow naming convention 'nimblebrain/mcp-*'"
            else
              echo "‚úÖ Image '$image' follows naming convention"
            fi
          done

  comment-results:
    needs: [check-changes, validate-servers, security-check]
    if: always() && needs.check-changes.outputs.servers == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Comment PR results
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;

            let comment = "## ü§ñ Registry Validation Results\n\n";

            if ("${{ needs.validate-servers.result }}" === "success") {
              comment += "‚úÖ **Server Validation**: All servers passed validation\n";
            } else if ("${{ needs.validate-servers.result }}" === "failure") {
              comment += "‚ùå **Server Validation**: Some servers failed validation\n";
            }

            if ("${{ needs.security-check.result }}" === "success") {
              comment += "‚úÖ **Security Check**: No issues detected\n";
            } else if ("${{ needs.security-check.result }}" === "failure") {
              comment += "‚ö†Ô∏è **Security Check**: Issues detected (see logs)\n";
            }

            comment += "\n---\n";
            comment += "*Automated validation by NimbleTools Registry CI*";

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: comment
            });
