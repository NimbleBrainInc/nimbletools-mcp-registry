name: Deploy Registry

# on:
#   push:
#     branches: [ main ]
#     paths:
#       - 'servers/**'
#       - 'schemas/**'
#       - 'tools/**'
#   workflow_dispatch:
#     inputs:
#       force_deploy:
#         description: 'Force deployment even if no changes'
#         required: false
#         default: 'false'
#         type: boolean

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
    
    - name: Validate all servers
      run: |
        echo "🔍 Validating all servers before deployment..."
        uv run python tools/validate.py --all
    
    - name: Generate registry
      run: |
        echo "🔄 Generating registry.yaml..."
        uv run python tools/generate.py
    
    - name: Commit updated registry
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if registry.yaml has changes
        if git diff --quiet registry.yaml; then
          echo "ℹ️  No changes to registry.yaml"
          if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
            echo "ℹ️  Skipping deployment (use force_deploy to override)"
            exit 0
          fi
        else
          echo "📝 Registry changes detected, committing..."
          git add registry.yaml
          git commit -m "Auto-update registry.yaml

Generated from server definitions
- $(uv run python -c "import yaml; r=yaml.safe_load(open('registry.yaml')); print(f'{r[\"metadata\"][\"serverCount\"]} servers'")
- $(date -u '+%Y-%m-%d %H:%M:%S UTC')

[skip ci]"
          git push
        fi
    
    - name: Create release tag
      id: tag
      run: |
        # Generate version based on date and commit
        version="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        echo "version=$version" >> $GITHUB_OUTPUT
        
        # Check if tag already exists
        if git tag | grep -q "^$version$"; then
          echo "ℹ️  Tag $version already exists, skipping release"
          echo "create_release=false" >> $GITHUB_OUTPUT
        else
          echo "🏷️  Creating tag: $version"
          git tag $version
          git push origin $version
          echo "create_release=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Create GitHub Release
      if: steps.tag.outputs.create_release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.version }}
        release_name: Registry Release ${{ steps.tag.outputs.version }}
        body: |
          ## NimbleTools Community MCP Registry Release
          
          **Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Commit:** ${{ github.sha }}
          
          ### Registry Statistics
          - **Total Servers:** $(uv run python -c "import yaml; r=yaml.safe_load(open('registry.yaml')); print(r['metadata']['serverCount'])")
          - **Active Servers:** $(uv run python -c "import yaml; r=yaml.safe_load(open('registry.yaml')); print(r['spec']['statistics']['activeServers'])")
          - **Categories:** $(uv run python -c "import yaml; r=yaml.safe_load(open('registry.yaml')); print(len(r['spec']['categories']))")
          
          ### Registry Format
          - **API Version:** `registry.nimbletools.ai/v1`
          - **Kind:** `MCPRegistry`
          
          This registry can be consumed by the NimbleTools platform for dynamic MCP server discovery and deployment.
          
          ---
          *Auto-generated by GitHub Actions*
        draft: false
        prerelease: false
    
    - name: Upload registry artifact
      uses: actions/upload-artifact@v3
      with:
        name: registry-${{ steps.tag.outputs.version }}
        path: registry.yaml
        retention-days: 90
    
    - name: Notify deployment
      run: |
        echo "🚀 Registry deployment completed!"
        echo "   Version: ${{ steps.tag.outputs.version }}"
        echo "   Servers: $(uv run python -c "import yaml; r=yaml.safe_load(open('registry.yaml')); print(r['metadata']['serverCount'])")"
        echo "   Registry available at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.version }}"